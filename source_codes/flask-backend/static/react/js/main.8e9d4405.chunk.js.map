{"version":3,"sources":["components/title.jsx","components/checkboxQ1.jsx","components/question1.jsx","components/checkboxQ2.jsx","components/question2.jsx","components/profileButton.jsx","App.js","serviceWorker.js","index.js"],"names":["title","state","word","style","color","marginLeft","marginTop","fontFamily","fontWeight","fontSize","this","Component","checkboxQ1","marginBottom","Checkbox","label","props","WDefintion","question1","definitions","fetch","then","response","json","data","console","log","id","borderStyle","marginRight","paddingLeft","backgroundColor","paddingBottom","map","wDef","key","checkboxQ2","w","question2","randomWords","correctWords","numberCorrect","columns","profileButton","height","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kSAEqBA,E,2MACnBC,MAAQ,CACNC,KAAM,S,wEAcN,OACI,yBAAKC,MAXU,CACfC,MAAO,QACPC,WAAY,KACZC,UAAW,OACXC,WAAa,iBACbC,WAAY,OACZC,SAAU,SAMN,6CAAmBC,KAAKT,MAAMC,W,GAlBPS,a,iDCepBC,EAdf,iLAEI,OACE,yBAAKT,MAAO,CAAEU,aAAc,QAC1B,kBAACC,EAAA,EAAD,CACEV,MAAM,QACND,MAAO,CAAEM,SAAU,QACnBM,MAAOL,KAAKM,MAAMC,kBAP5B,GAAgCN,aCyCjBO,EAzCf,2MACEjB,MAAQ,CACNC,KAAM,QACNiB,YAAa,IAHjB,mFAOIC,MAAM,2BACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIC,QAAQC,IAAIF,QAThC,+BAaI,IAYIG,EAAK,EAET,OACE,yBAAKxB,MAfe,CACpBE,WAAY,KACZuB,YAAa,SACbC,YAAa,MACbC,YAAa,KACbC,gBAAiB,QACjBxB,WAAY,UACZE,SAAU,OACVuB,cAAe,OACfnB,aAAc,QAOZ,0CACA,wEAA8CH,KAAKT,MAAMC,MACzD,6BACGQ,KAAKT,MAAMkB,YAAYc,KAAI,SAAAC,GAAI,OAC9B,kBAAC,EAAD,CAAUC,IAAMR,GAAU,EAAIV,WAAYiB,aAjCtD,GAA+BvB,aCUhByB,EAVf,iLAEQ,OACI,6BACI,kBAACtB,EAAA,EAAD,CAAUX,MAAS,CAACM,SAAU,QAASM,MAAOL,KAAKM,MAAMqB,SAJzE,GAAgC1B,aCoDjB2B,EApDf,2MACErC,MAAQ,CACNC,KAAM,QACNqC,YAAa,CACX,cACA,QACA,UACA,YACA,UACA,UACA,eACA,aACA,OACA,mBACA,aACA,gBAEFC,aAAc,CAAC,QAAS,gBACxBC,cAAe,GAlBnB,wEAsBI,IAWId,EAAK,EAET,OACE,yBAAKxB,MAde,CACpBE,WAAY,KACZuB,YAAa,SACbC,YAAa,MACbC,YAAa,KACbC,gBAAiB,QACjBxB,WAAY,UACZE,SAAU,OACVuB,cAAe,SAOb,0CACA,2CACetB,KAAKT,MAAMwC,cAD1B,2BACiE,IAC9D/B,KAAKT,MAAMC,MAEd,yBAAKC,MAAO,CAAEuC,QAAS,WACpBhC,KAAKT,MAAMsC,YAAYN,KAAI,SAAAI,GAAC,OAC3B,kBAAC,EAAD,CAAUF,IAAMR,GAAU,EAAIU,EAAGA,aA5C7C,GAA+B1B,aCchBgC,EAff,iLAOQ,OACI,yBAAKxC,MALO,CACZyC,OAAQ,SAKJ,gDAThB,GAAmCjC,a,OCuBpBkC,MAlBf,WAKE,OACE,yBAAKC,UAAU,OACb,yBAAK3C,MANQ,CACf4B,gBAAiB,sBAMb,kBAAC,EAAD,OAEF,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,gCCRcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"js/main.8e9d4405.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class title extends Component {\r\n  state = {\r\n    word: \"apple\"\r\n  }\r\n\r\n  render() {\r\n    const titleStyle = {\r\n        color: \"black\",\r\n        marginLeft: \"5%\",\r\n        marginTop: \"20px\",\r\n        fontFamily:  \"Georgia, serif\",\r\n        fontWeight: \"bold\",\r\n        fontSize: \"20px\",\r\n        //textDecoration: \"underline\"\r\n    };\r\n\r\n    return (\r\n        <div style = {titleStyle}>\r\n            <h3>Quiz on word: {this.state.word}</h3>\r\n        </div> // replace after the text \r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Checkbox } from \"semantic-ui-react\";\r\n\r\nexport class checkboxQ1 extends Component {\r\n  render() {\r\n    return (\r\n      <div style={{ marginBottom: \"5px\" }}>\r\n        <Checkbox\r\n          color=\"green\"\r\n          style={{ fontSize: \"14px\" }}\r\n          label={this.props.WDefintion}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default checkboxQ1;\r\n","import React, { Component } from \"react\";\r\nimport CheckBox from \"./checkboxQ1\";\r\n\r\nexport class question1 extends Component {\r\n  state = {\r\n    word: \"apple\",\r\n    definitions: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\" http://127.0.0.1:5000/\")\r\n      .then(response => response.json())\r\n      .then(data => console.log(data));\r\n  }\r\n\r\n  render() {\r\n    const questionStyle = {\r\n      marginLeft: \"5%\",\r\n      borderStyle: \"outset\",\r\n      marginRight: \"30%\",\r\n      paddingLeft: \"2%\",\r\n      backgroundColor: \"white\",\r\n      fontFamily: \"Georgia\",\r\n      fontSize: \"14px\",\r\n      paddingBottom: \"10px\",\r\n      marginBottom: \"5px\"\r\n    };\r\n\r\n    var id = 0;\r\n\r\n    return (\r\n      <div style={questionStyle}>\r\n        <h3>Question 1</h3>\r\n        <h5>Task : Find the right definition of word {this.state.word}</h5>\r\n        <div>\r\n          {this.state.definitions.map(wDef => (\r\n            <CheckBox key={(id = id + 1)} WDefintion={wDef}></CheckBox>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default question1;\r\n","import React, { Component } from 'react';\r\nimport { Checkbox } from 'semantic-ui-react';\r\n\r\nexport class checkboxQ2 extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Checkbox style = {{fontSize: \"14px\"}} label={this.props.w} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default checkboxQ2;\r\n","import React, { Component } from \"react\";\r\nimport CheckBox from \"./checkboxQ2\";\r\n\r\nexport class question2 extends Component {\r\n  state = {\r\n    word: \"apple\",\r\n    randomWords: [\r\n      \"time period\",\r\n      \"fruit\",\r\n      \"science\",\r\n      \"happening\",\r\n      \"command\",\r\n      \"concept\",\r\n      \"cryptography\",\r\n      \"speech act\",\r\n      \"spin\",\r\n      \"infectious agent\",\r\n      \"dishonesty\",\r\n      \"edible fruit\"\r\n    ],\r\n    correctWords: [\"fruit\", \"edible fruit\"],\r\n    numberCorrect: 2\r\n  };\r\n\r\n  render() {\r\n    const questionStyle = {\r\n      marginLeft: \"5%\",\r\n      borderStyle: \"outset\",\r\n      marginRight: \"30%\",\r\n      paddingLeft: \"2%\",\r\n      backgroundColor: \"white\",\r\n      fontFamily: \"Georgia\",\r\n      fontSize: \"14px\",\r\n      paddingBottom: \"10px\"\r\n    };\r\n\r\n    var id = 0;\r\n\r\n    return (\r\n      <div style={questionStyle}>\r\n        <h3>Question 2</h3>\r\n        <h5>\r\n          Task : Find {this.state.numberCorrect} related word(s) to word{\" \"}\r\n          {this.state.word}\r\n        </h5>\r\n        <div style={{ columns: \"3 auto\" }}>\r\n          {this.state.randomWords.map(w => (\r\n            <CheckBox key={(id = id + 1)} w={w}></CheckBox>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default question2;\r\n","import React, { Component } from 'react';\r\n\r\nexport class profileButton extends Component {\r\n    render() {\r\n\r\n        const stylePB = {\r\n            height: \"35px\",\r\n        }\r\n\r\n        return (\r\n            <div style = {stylePB}>\r\n                <button> Button</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default profileButton;\r\n","import React from \"react\";\nimport Title from \"./components/title\";\nimport Question1 from \"./components/question1\";\nimport Question2 from \"./components/question2\";\nimport ProfileButton from \"./components/profileButton\";\nimport \"./App.css\";\n\nfunction App() {\n  const barStyle = {\n    backgroundColor: \"rgb(30, 144, 255)\"\n  };\n\n  return (\n    <div className=\"App\">\n      <div style={barStyle}>\n        <ProfileButton />\n      </div>\n      <Title />\n      <Question1 />\n      <Question2 />\n      <div></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}